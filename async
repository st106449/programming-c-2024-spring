
#include <iostream>
#include <future>
#include <chrono>
#include <vector>
#include <cmath>
const int N = 1'000'000;
const int n = N+1;
std::vector <double> v(n);
int block_size (int threads)
{
return n / threads + (n % threads ? 1 : 0);
}
void sum(int threads, int first_index)
{

int bl_size = block_size(threads);

for (int i = first_index; i < std::min(first_index + bl_size, n); i++)
{
    
//v[i] += (double)(1/(1+(double)((2*i+1.0)/n)));
v[i] += 1.0 / (1 + ((2 * (i + 1) - 1.0) / (2 * n))*((2 * (i + 1) - 1.0) / (2 * n)));
}
}
void MultiThreadTable(int threads)
{
std::vector<std::future <void>> fut(threads);
int bl_size = block_size(threads);
int first_index = 0;
int i = 0;
while (first_index < n)
{
fut[i] = std::async(sum, threads, first_index);
first_index += bl_size;
i++;
}
for (int j=0; j<i; ++j)
{
    fut[j].get();
    
}

}
int main()
{
int threads = 8;
auto start = std::chrono::steady_clock::now();
MultiThreadTable(threads);
auto finish = std::chrono::steady_clock::now();
double pi;
std::cout << std::chrono::duration_cast <std::chrono::milliseconds> (finish - start).count() << " ms" << std::endl;
for (int i = 0; i < threads; ++i)
pi += double(1/n)*v[i];
std::cout << pi;
return EXIT_SUCCESS;
}
